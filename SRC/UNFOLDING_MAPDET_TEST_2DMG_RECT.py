import numpy as np
import time
import os
import sys
import random
import logging

# Prevent .pyc file generation
os.environ['PYTHONDONTWRITEBYTECODE'] = '1'
sys.dont_write_bytecode = True

start_time = time.time()

from SRC_UNFOLDING_2D_RECT import *

#================================================================================
TOT = [[0.0, 0.0, 0.0, 0.0, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.027464000000000002, 0.027464000000000002, 0.027464000000000002, 0.027464000000000002, 0.027464000000000002, 0.027464000000000002, 0.027464000000000002, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.0, 0.0, 0.0, 0.025762200000000002, 0.025762200000000002, 0.027464000000000002, 0.027464000000000002, 0.027320999999999998, 0.0272582, 0.0272582, 0.0272582, 0.0272582, 0.0272582, 0.027320999999999998, 0.027464000000000002, 0.027464000000000002, 0.025762200000000002, 0.025762200000000002, 0.0, 0.0, 0.025762200000000002, 0.027464000000000002, 0.027464000000000002, 0.027292999999999998, 0.0272582, 0.027290000000000002, 0.0272582, 0.027290000000000002, 0.0272582, 0.027290000000000002, 0.0272582, 0.027292999999999998, 0.027464000000000002, 0.027464000000000002, 0.025762200000000002, 0.0, 0.025762200000000002, 0.025762200000000002, 0.027464000000000002, 0.027292999999999998, 0.0272995, 0.027320999999999998, 0.0272582, 0.0272582, 0.0272582, 0.0272582, 0.0272582, 0.027320999999999998, 0.0272995, 0.027292999999999998, 0.027464000000000002, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.027464000000000002, 0.027320999999999998, 0.0272582, 0.027320999999999998, 0.0272995, 0.027320999999999998, 0.0272995, 0.027324, 0.0272995, 0.027320999999999998, 0.0272995, 0.027320999999999998, 0.0272582, 0.027320999999999998, 0.027464000000000002, 0.025762200000000002, 0.025762200000000002, 0.027464000000000002, 0.0272582, 0.027290000000000002, 0.0272582, 0.027320999999999998, 0.0272582, 0.027320999999999998, 0.0272995, 0.027320999999999998, 0.0272582, 0.027320999999999998, 0.0272582, 0.027290000000000002, 0.0272582, 0.027464000000000002, 0.025762200000000002, 0.025762200000000002, 0.027464000000000002, 0.0272582, 0.0272582, 0.0272582, 0.0272995, 0.027320999999999998, 0.0272582, 0.027320999999999998, 0.0272582, 0.027320999999999998, 0.0272995, 0.0272582, 0.0272582, 0.0272582, 0.027464000000000002, 0.025762200000000002, 0.025762200000000002, 0.027464000000000002, 0.0272582, 0.027290000000000002, 0.0272582, 0.027324, 0.0272995, 0.027320999999999998, 0.0272582, 0.027320999999999998, 0.0272995, 0.027324, 0.0272582, 0.027290000000000002, 0.0272582, 0.027464000000000002, 0.025762200000000002, 0.025762200000000002, 0.027464000000000002, 0.0272582, 0.0272582, 0.0272582, 0.0272995, 0.027320999999999998, 0.0272582, 0.027320999999999998, 0.0272582, 0.027320999999999998, 0.0272995, 0.0272582, 0.0272582, 0.0272582, 0.027464000000000002, 0.025762200000000002, 0.025762200000000002, 0.027464000000000002, 0.0272582, 0.027290000000000002, 0.0272582, 0.027320999999999998, 0.0272582, 0.027320999999999998, 0.0272995, 0.027320999999999998, 0.0272582, 0.027320999999999998, 0.0272582, 0.027290000000000002, 0.0272582, 0.027464000000000002, 0.025762200000000002, 0.025762200000000002, 0.027464000000000002, 0.027320999999999998, 0.0272582, 0.027320999999999998, 0.0272995, 0.027320999999999998, 0.0272995, 0.027324, 0.0272995, 0.027320999999999998, 0.0272995, 0.027320999999999998, 0.0272582, 0.027320999999999998, 0.027464000000000002, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.027464000000000002, 0.027292999999999998, 0.0272995, 0.027320999999999998, 0.0272582, 0.0272582, 0.0272582, 0.0272582, 0.0272582, 0.027320999999999998, 0.0272995, 0.027292999999999998, 0.027464000000000002, 0.025762200000000002, 0.025762200000000002, 0.0, 0.025762200000000002, 0.027464000000000002, 0.027464000000000002, 0.027292999999999998, 0.0272582, 0.027290000000000002, 0.0272582, 0.027290000000000002, 0.0272582, 0.027290000000000002, 0.0272582, 0.027292999999999998, 0.027464000000000002, 0.027464000000000002, 0.025762200000000002, 0.0, 0.0, 0.025762200000000002, 0.025762200000000002, 0.027464000000000002, 0.027464000000000002, 0.027320999999999998, 0.0272582, 0.0272582, 0.0272582, 0.0272582, 0.0272582, 0.027320999999999998, 0.027464000000000002, 0.027464000000000002, 0.025762200000000002, 0.025762200000000002, 0.0, 0.0, 0.0, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.027464000000000002, 0.027464000000000002, 0.027464000000000002, 0.027464000000000002, 0.027464000000000002, 0.027464000000000002, 0.027464000000000002, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.025762200000000002, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.071596, 0.071596, 0.071596, 0.071596, 0.071596, 0.071596, 0.071596, 0.071596, 0.071596, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.071596, 0.071596, 0.071596, 0.091408, 0.091408, 0.091408, 0.091408, 0.091408, 0.091408, 0.091408, 0.071596, 0.071596, 0.071596, 0.0, 0.0, 0.0, 0.071596, 0.071596, 0.091408, 0.091408, 0.09051, 0.075058, 0.075058, 0.075058, 0.075058, 0.075058, 0.09051, 0.091408, 0.091408, 0.071596, 0.071596, 0.0, 0.0, 0.071596, 0.091408, 0.091408, 0.084828, 0.075058, 0.088024, 0.075058, 0.088024, 0.075058, 0.088024, 0.075058, 0.084828, 0.091408, 0.091408, 0.071596, 0.0, 0.071596, 0.071596, 0.091408, 0.084828, 0.078436, 0.09051, 0.075058, 0.075058, 0.075058, 0.075058, 0.075058, 0.09051, 0.078436, 0.084828, 0.091408, 0.071596, 0.071596, 0.071596, 0.091408, 0.09051, 0.075058, 0.09051, 0.078436, 0.09051, 0.078436, 0.087314, 0.078436, 0.09051, 0.078436, 0.09051, 0.075058, 0.09051, 0.091408, 0.071596, 0.071596, 0.091408, 0.075058, 0.088024, 0.075058, 0.09051, 0.075058, 0.09051, 0.078436, 0.09051, 0.075058, 0.09051, 0.075058, 0.088024, 0.075058, 0.091408, 0.071596, 0.071596, 0.091408, 0.075058, 0.075058, 0.075058, 0.078436, 0.09051, 0.075058, 0.09051, 0.075058, 0.09051, 0.078436, 0.075058, 0.075058, 0.075058, 0.091408, 0.071596, 0.071596, 0.091408, 0.075058, 0.088024, 0.075058, 0.087314, 0.078436, 0.09051, 0.075058, 0.09051, 0.078436, 0.087314, 0.075058, 0.088024, 0.075058, 0.091408, 0.071596, 0.071596, 0.091408, 0.075058, 0.075058, 0.075058, 0.078436, 0.09051, 0.075058, 0.09051, 0.075058, 0.09051, 0.078436, 0.075058, 0.075058, 0.075058, 0.091408, 0.071596, 0.071596, 0.091408, 0.075058, 0.088024, 0.075058, 0.09051, 0.075058, 0.09051, 0.078436, 0.09051, 0.075058, 0.09051, 0.075058, 0.088024, 0.075058, 0.091408, 0.071596, 0.071596, 0.091408, 0.09051, 0.075058, 0.09051, 0.078436, 0.09051, 0.078436, 0.087314, 0.078436, 0.09051, 0.078436, 0.09051, 0.075058, 0.09051, 0.091408, 0.071596, 0.071596, 0.071596, 0.091408, 0.084828, 0.078436, 0.09051, 0.075058, 0.075058, 0.075058, 0.075058, 0.075058, 0.09051, 0.078436, 0.084828, 0.091408, 0.071596, 0.071596, 0.0, 0.071596, 0.091408, 0.091408, 0.084828, 0.075058, 0.088024, 0.075058, 0.088024, 0.075058, 0.088024, 0.075058, 0.084828, 0.091408, 0.091408, 0.071596, 0.0, 0.0, 0.071596, 0.071596, 0.091408, 0.091408, 0.09051, 0.075058, 0.075058, 0.075058, 0.075058, 0.075058, 0.09051, 0.091408, 0.091408, 0.071596, 0.071596, 0.0, 0.0, 0.0, 0.071596, 0.071596, 0.071596, 0.091408, 0.091408, 0.091408, 0.091408, 0.091408, 0.091408, 0.091408, 0.071596, 0.071596, 0.071596, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.071596, 0.071596, 0.071596, 0.071596, 0.071596, 0.071596, 0.071596, 0.071596, 0.071596, 0.0, 0.0, 0.0, 0.0]]
NUFIS = [[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0074527, 0.0074527, 0.0074527, 0.0074527, 0.0074527, 0.0074527, 0.0074527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0074527, 0.0074527, 0.0064285, 0.0058708, 0.0058708, 0.0058708, 0.0058708, 0.0058708, 0.0064285, 0.0074527, 0.0074527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0074527, 0.0074527, 0.0061908, 0.0058708, 0.0061908, 0.0058708, 0.0061908, 0.0058708, 0.0061908, 0.0058708, 0.0061908, 0.0074527, 0.0074527, 0.0, 0.0, 0.0, 0.0, 0.0074527, 0.0061908, 0.0061908, 0.0064285, 0.0058708, 0.0058708, 0.0058708, 0.0058708, 0.0058708, 0.0064285, 0.0061908, 0.0061908, 0.0074527, 0.0, 0.0, 0.0, 0.0074527, 0.0064285, 0.0058708, 0.0064285, 0.0061908, 0.0064285, 0.0061908, 0.0064285, 0.0061908, 0.0064285, 0.0061908, 0.0064285, 0.0058708, 0.0064285, 0.0074527, 0.0, 0.0, 0.0074527, 0.0058708, 0.0061908, 0.0058708, 0.0064285, 0.0058708, 0.0064285, 0.0061908, 0.0064285, 0.0058708, 0.0064285, 0.0058708, 0.0061908, 0.0058708, 0.0074527, 0.0, 0.0, 0.0074527, 0.0058708, 0.0058708, 0.0058708, 0.0061908, 0.0064285, 0.0058708, 0.0064285, 0.0058708, 0.0064285, 0.0061908, 0.0058708, 0.0058708, 0.0058708, 0.0074527, 0.0, 0.0, 0.0074527, 0.0058708, 0.0061908, 0.0058708, 0.0064285, 0.0061908, 0.0064285, 0.0058708, 0.0064285, 0.0061908, 0.0064285, 0.0058708, 0.0061908, 0.0058708, 0.0074527, 0.0, 0.0, 0.0074527, 0.0058708, 0.0058708, 0.0058708, 0.0061908, 0.0064285, 0.0058708, 0.0064285, 0.0058708, 0.0064285, 0.0061908, 0.0058708, 0.0058708, 0.0058708, 0.0074527, 0.0, 0.0, 0.0074527, 0.0058708, 0.0061908, 0.0058708, 0.0064285, 0.0058708, 0.0064285, 0.0061908, 0.0064285, 0.0058708, 0.0064285, 0.0058708, 0.0061908, 0.0058708, 0.0074527, 0.0, 0.0, 0.0074527, 0.0064285, 0.0058708, 0.0064285, 0.0061908, 0.0064285, 0.0061908, 0.0064285, 0.0061908, 0.0064285, 0.0061908, 0.0064285, 0.0058708, 0.0064285, 0.0074527, 0.0, 0.0, 0.0, 0.0074527, 0.0061908, 0.0061908, 0.0064285, 0.0058708, 0.0058708, 0.0058708, 0.0058708, 0.0058708, 0.0064285, 0.0061908, 0.0061908, 0.0074527, 0.0, 0.0, 0.0, 0.0, 0.0074527, 0.0074527, 0.0061908, 0.0058708, 0.0061908, 0.0058708, 0.0061908, 0.0058708, 0.0061908, 0.0058708, 0.0061908, 0.0074527, 0.0074527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0074527, 0.0074527, 0.0064285, 0.0058708, 0.0058708, 0.0058708, 0.0058708, 0.0058708, 0.0064285, 0.0074527, 0.0074527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0074527, 0.0074527, 0.0074527, 0.0074527, 0.0074527, 0.0074527, 0.0074527, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13236, 0.13236, 0.13236, 0.13236, 0.13236, 0.13236, 0.13236, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13236, 0.13236, 0.10911, 0.096067, 0.096067, 0.096067, 0.096067, 0.096067, 0.10911, 0.13236, 0.13236, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13236, 0.13236, 0.10358, 0.096067, 0.10358, 0.096067, 0.10358, 0.096067, 0.10358, 0.096067, 0.10358, 0.13236, 0.13236, 0.0, 0.0, 0.0, 0.0, 0.13236, 0.10358, 0.10358, 0.10911, 0.096067, 0.096067, 0.096067, 0.096067, 0.096067, 0.10911, 0.10358, 0.10358, 0.13236, 0.0, 0.0, 0.0, 0.13236, 0.10911, 0.096067, 0.10911, 0.10358, 0.10911, 0.10358, 0.10911, 0.10358, 0.10911, 0.10358, 0.10911, 0.096067, 0.10911, 0.13236, 0.0, 0.0, 0.13236, 0.096067, 0.10358, 0.096067, 0.10911, 0.096067, 0.10911, 0.10358, 0.10911, 0.096067, 0.10911, 0.096067, 0.10358, 0.096067, 0.13236, 0.0, 0.0, 0.13236, 0.096067, 0.096067, 0.096067, 0.10358, 0.10911, 0.096067, 0.10911, 0.096067, 0.10911, 0.10358, 0.096067, 0.096067, 0.096067, 0.13236, 0.0, 0.0, 0.13236, 0.096067, 0.10358, 0.096067, 0.10911, 0.10358, 0.10911, 0.096067, 0.10911, 0.10358, 0.10911, 0.096067, 0.10358, 0.096067, 0.13236, 0.0, 0.0, 0.13236, 0.096067, 0.096067, 0.096067, 0.10358, 0.10911, 0.096067, 0.10911, 0.096067, 0.10911, 0.10358, 0.096067, 0.096067, 0.096067, 0.13236, 0.0, 0.0, 0.13236, 0.096067, 0.10358, 0.096067, 0.10911, 0.096067, 0.10911, 0.10358, 0.10911, 0.096067, 0.10911, 0.096067, 0.10358, 0.096067, 0.13236, 0.0, 0.0, 0.13236, 0.10911, 0.096067, 0.10911, 0.10358, 0.10911, 0.10358, 0.10911, 0.10358, 0.10911, 0.10358, 0.10911, 0.096067, 0.10911, 0.13236, 0.0, 0.0, 0.0, 0.13236, 0.10358, 0.10358, 0.10911, 0.096067, 0.096067, 0.096067, 0.096067, 0.096067, 0.10911, 0.10358, 0.10358, 0.13236, 0.0, 0.0, 0.0, 0.0, 0.13236, 0.13236, 0.10358, 0.096067, 0.10358, 0.096067, 0.10358, 0.096067, 0.10358, 0.096067, 0.10358, 0.13236, 0.13236, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13236, 0.13236, 0.10911, 0.096067, 0.096067, 0.096067, 0.096067, 0.096067, 0.10911, 0.13236, 0.13236, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.13236, 0.13236, 0.13236, 0.13236, 0.13236, 0.13236, 0.13236, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
chi = [[0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]
SIGS_reshaped = [[[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]], [[0.0, 0.0, 0.0, 0.0, 0.023106, 0.023106, 0.023106, 0.023106, 0.023106, 0.023106, 0.023106, 0.023106, 0.023106, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.023106, 0.023106, 0.023106, 0.017101, 0.017101, 0.017101, 0.017101, 0.017101, 0.017101, 0.017101, 0.023106, 0.023106, 0.023106, 0.0, 0.0, 0.0, 0.023106, 0.023106, 0.017101, 0.017101, 0.017027, 0.017754, 0.017754, 0.017754, 0.017754, 0.017754, 0.017027, 0.017101, 0.017101, 0.023106, 0.023106, 0.0, 0.0, 0.023106, 0.017101, 0.017101, 0.01729, 0.017754, 0.017125, 0.017754, 0.017125, 0.017754, 0.017125, 0.017754, 0.01729, 0.017101, 0.017101, 0.023106, 0.0, 0.023106, 0.023106, 0.017101, 0.01729, 0.017621, 0.017027, 0.017754, 0.017754, 0.017754, 0.017754, 0.017754, 0.017027, 0.017621, 0.01729, 0.017101, 0.023106, 0.023106, 0.023106, 0.017101, 0.017027, 0.017754, 0.017027, 0.017621, 0.017027, 0.017621, 0.017192, 0.017621, 0.017027, 0.017621, 0.017027, 0.017754, 0.017027, 0.017101, 0.023106, 0.023106, 0.017101, 0.017754, 0.017125, 0.017754, 0.017027, 0.017754, 0.017027, 0.017621, 0.017027, 0.017754, 0.017027, 0.017754, 0.017125, 0.017754, 0.017101, 0.023106, 0.023106, 0.017101, 0.017754, 0.017754, 0.017754, 0.017621, 0.017027, 0.017754, 0.017027, 0.017754, 0.017027, 0.017621, 0.017754, 0.017754, 0.017754, 0.017101, 0.023106, 0.023106, 0.017101, 0.017754, 0.017125, 0.017754, 0.017192, 0.017621, 0.017027, 0.017754, 0.017027, 0.017621, 0.017192, 0.017754, 0.017125, 0.017754, 0.017101, 0.023106, 0.023106, 0.017101, 0.017754, 0.017754, 0.017754, 0.017621, 0.017027, 0.017754, 0.017027, 0.017754, 0.017027, 0.017621, 0.017754, 0.017754, 0.017754, 0.017101, 0.023106, 0.023106, 0.017101, 0.017754, 0.017125, 0.017754, 0.017027, 0.017754, 0.017027, 0.017621, 0.017027, 0.017754, 0.017027, 0.017754, 0.017125, 0.017754, 0.017101, 0.023106, 0.023106, 0.017101, 0.017027, 0.017754, 0.017027, 0.017621, 0.017027, 0.017621, 0.017192, 0.017621, 0.017027, 0.017621, 0.017027, 0.017754, 0.017027, 0.017101, 0.023106, 0.023106, 0.023106, 0.017101, 0.01729, 0.017621, 0.017027, 0.017754, 0.017754, 0.017754, 0.017754, 0.017754, 0.017027, 0.017621, 0.01729, 0.017101, 0.023106, 0.023106, 0.0, 0.023106, 0.017101, 0.017101, 0.01729, 0.017754, 0.017125, 0.017754, 0.017125, 0.017754, 0.017125, 0.017754, 0.01729, 0.017101, 0.017101, 0.023106, 0.0, 0.0, 0.023106, 0.023106, 0.017101, 0.017101, 0.017027, 0.017754, 0.017754, 0.017754, 0.017754, 0.017754, 0.017027, 0.017101, 0.017101, 0.023106, 0.023106, 0.0, 0.0, 0.0, 0.023106, 0.023106, 0.023106, 0.017101, 0.017101, 0.017101, 0.017101, 0.017101, 0.017101, 0.017101, 0.023106, 0.023106, 0.023106, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.023106, 0.023106, 0.023106, 0.023106, 0.023106, 0.023106, 0.023106, 0.023106, 0.023106, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]]]
D1 = [[0.0, 0.0, 0.0, 0.0, 1.32000000000132, 1.32000000000132, 1.32000000000132, 1.32000000000132, 1.32000000000132, 1.32000000000132, 1.32000000000132, 1.32000000000132, 1.32000000000132, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 1.32000000000132, 1.32000000000132, 1.32000000000132, 1.438899999999674, 1.438899999999674, 1.438899999999674, 1.438899999999674, 1.438899999999674, 1.438899999999674, 1.438899999999674, 1.32000000000132, 1.32000000000132, 1.32000000000132, 0.0, 0.0], [0.0, 1.32000000000132, 1.32000000000132, 1.438899999999674, 1.438899999999674, 1.4393000000015672, 1.4359999999970419, 1.4359999999970419, 1.4359999999970419, 1.4359999999970419, 1.4359999999970419, 1.4393000000015672, 1.438899999999674, 1.438899999999674, 1.32000000000132, 1.32000000000132, 0.0], [0.0, 1.32000000000132, 1.438899999999674, 1.438899999999674, 1.4380999999971658, 1.4359999999970419, 1.438899999999674, 1.4359999999970419, 1.438899999999674, 1.4359999999970419, 1.438899999999674, 1.4359999999970419, 1.4380999999971658, 1.438899999999674, 1.438899999999674, 1.32000000000132, 0.0], [1.32000000000132, 1.32000000000132, 1.438899999999674, 1.4380999999971658, 1.4366000000007633, 1.4393000000015672, 1.4359999999970419, 1.4359999999970419, 1.4359999999970419, 1.4359999999970419, 1.4359999999970419, 1.4393000000015672, 1.4366000000007633, 1.4380999999971658, 1.438899999999674, 1.32000000000132, 1.32000000000132], [1.32000000000132, 1.438899999999674, 1.4393000000015672, 1.4359999999970419, 1.4393000000015672, 1.4366000000007633, 1.4393000000015672, 1.4366000000007633, 1.4385000000005321, 1.4366000000007633, 1.4393000000015672, 1.4366000000007633, 1.4393000000015672, 1.4359999999970419, 1.4393000000015672, 1.438899999999674, 1.32000000000132], [1.32000000000132, 1.438899999999674, 1.4359999999970419, 1.438899999999674, 1.4359999999970419, 1.4393000000015672, 1.4359999999970419, 1.4393000000015672, 1.4366000000007633, 1.4393000000015672, 1.4359999999970419, 1.4393000000015672, 1.4359999999970419, 1.438899999999674, 1.4359999999970419, 1.438899999999674, 1.32000000000132], [1.32000000000132, 1.438899999999674, 1.4359999999970419, 1.4359999999970419, 1.4359999999970419, 1.4366000000007633, 1.4393000000015672, 1.4359999999970419, 1.4393000000015672, 1.4359999999970419, 1.4393000000015672, 1.4366000000007633, 1.4359999999970419, 1.4359999999970419, 1.4359999999970419, 1.438899999999674, 1.32000000000132], [1.32000000000132, 1.438899999999674, 1.4359999999970419, 1.438899999999674, 1.4359999999970419, 1.4385000000005321, 1.4366000000007633, 1.4393000000015672, 1.4359999999970419, 1.4393000000015672, 1.4366000000007633, 1.4385000000005321, 1.4359999999970419, 1.438899999999674, 1.4359999999970419, 1.438899999999674, 1.32000000000132], [1.32000000000132, 1.438899999999674, 1.4359999999970419, 1.4359999999970419, 1.4359999999970419, 1.4366000000007633, 1.4393000000015672, 1.4359999999970419, 1.4393000000015672, 1.4359999999970419, 1.4393000000015672, 1.4366000000007633, 1.4359999999970419, 1.4359999999970419, 1.4359999999970419, 1.438899999999674, 1.32000000000132], [1.32000000000132, 1.438899999999674, 1.4359999999970419, 1.438899999999674, 1.4359999999970419, 1.4393000000015672, 1.4359999999970419, 1.4393000000015672, 1.4366000000007633, 1.4393000000015672, 1.4359999999970419, 1.4393000000015672, 1.4359999999970419, 1.438899999999674, 1.4359999999970419, 1.438899999999674, 1.32000000000132], [1.32000000000132, 1.438899999999674, 1.4393000000015672, 1.4359999999970419, 1.4393000000015672, 1.4366000000007633, 1.4393000000015672, 1.4366000000007633, 1.4385000000005321, 1.4366000000007633, 1.4393000000015672, 1.4366000000007633, 1.4393000000015672, 1.4359999999970419, 1.4393000000015672, 1.438899999999674, 1.32000000000132], [1.32000000000132, 1.32000000000132, 1.438899999999674, 1.4380999999971658, 1.4366000000007633, 1.4393000000015672, 1.4359999999970419, 1.4359999999970419, 1.4359999999970419, 1.4359999999970419, 1.4359999999970419, 1.4393000000015672, 1.4366000000007633, 1.4380999999971658, 1.438899999999674, 1.32000000000132, 1.32000000000132], [0.0, 1.32000000000132, 1.438899999999674, 1.438899999999674, 1.4380999999971658, 1.4359999999970419, 1.438899999999674, 1.4359999999970419, 1.438899999999674, 1.4359999999970419, 1.438899999999674, 1.4359999999970419, 1.4380999999971658, 1.438899999999674, 1.438899999999674, 1.32000000000132, 0.0], [0.0, 1.32000000000132, 1.32000000000132, 1.438899999999674, 1.438899999999674, 1.4393000000015672, 1.4359999999970419, 1.4359999999970419, 1.4359999999970419, 1.4359999999970419, 1.4359999999970419, 1.4393000000015672, 1.438899999999674, 1.438899999999674, 1.32000000000132, 1.32000000000132, 0.0], [0.0, 0.0, 1.32000000000132, 1.32000000000132, 1.32000000000132, 1.438899999999674, 1.438899999999674, 1.438899999999674, 1.438899999999674, 1.438899999999674, 1.438899999999674, 1.438899999999674, 1.32000000000132, 1.32000000000132, 1.32000000000132, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 1.32000000000132, 1.32000000000132, 1.32000000000132, 1.32000000000132, 1.32000000000132, 1.32000000000132, 1.32000000000132, 1.32000000000132, 1.32000000000132, 0.0, 0.0, 0.0, 0.0]]
D2 = [[0.0, 0.0, 0.0, 0.0, 0.2772000000002772, 0.2772000000002772, 0.2772000000002772, 0.2772000000002772, 0.2772000000002772, 0.2772000000002772, 0.2772000000002772, 0.2772000000002772, 0.2772000000002772, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.2772000000002772, 0.2772000000002772, 0.2772000000002772, 0.3638000000000687, 0.3638000000000687, 0.3638000000000687, 0.3638000000000687, 0.3638000000000687, 0.3638000000000687, 0.3638000000000687, 0.2772000000002772, 0.2772000000002772, 0.2772000000002772, 0.0, 0.0], [0.0, 0.2772000000002772, 0.2772000000002772, 0.3638000000000687, 0.3638000000000687, 0.36800000000011185, 0.3635000000001089, 0.3635000000001089, 0.3635000000001089, 0.3635000000001089, 0.3635000000001089, 0.36800000000011185, 0.3638000000000687, 0.3638000000000687, 0.2772000000002772, 0.2772000000002772, 0.0], [0.0, 0.2772000000002772, 0.3638000000000687, 0.3638000000000687, 0.36649999999980687, 0.3635000000001089, 0.3679000000000666, 0.3635000000001089, 0.3679000000000666, 0.3635000000001089, 0.3679000000000666, 0.3635000000001089, 0.36649999999980687, 0.3638000000000687, 0.3638000000000687, 0.2772000000002772, 0.0], [0.2772000000002772, 0.2772000000002772, 0.3638000000000687, 0.36649999999980687, 0.36359999999996695, 0.36800000000011185, 0.3635000000001089, 0.3635000000001089, 0.3635000000001089, 0.3635000000001089, 0.3635000000001089, 0.36800000000011185, 0.36359999999996695, 0.36649999999980687, 0.3638000000000687, 0.2772000000002772, 0.2772000000002772], [0.2772000000002772, 0.3638000000000687, 0.36800000000011185, 0.3635000000001089, 0.36800000000011185, 0.36359999999996695, 0.36800000000011185, 0.36359999999996695, 0.36649999999980687, 0.36359999999996695, 0.36800000000011185, 0.36359999999996695, 0.36800000000011185, 0.3635000000001089, 0.36800000000011185, 0.3638000000000687, 0.2772000000002772], [0.2772000000002772, 0.3638000000000687, 0.3635000000001089, 0.3679000000000666, 0.3635000000001089, 0.36800000000011185, 0.3635000000001089, 0.36800000000011185, 0.36359999999996695, 0.36800000000011185, 0.3635000000001089, 0.36800000000011185, 0.3635000000001089, 0.3679000000000666, 0.3635000000001089, 0.3638000000000687, 0.2772000000002772], [0.2772000000002772, 0.3638000000000687, 0.3635000000001089, 0.3635000000001089, 0.3635000000001089, 0.36359999999996695, 0.36800000000011185, 0.3635000000001089, 0.36800000000011185, 0.3635000000001089, 0.36800000000011185, 0.36359999999996695, 0.3635000000001089, 0.3635000000001089, 0.3635000000001089, 0.3638000000000687, 0.2772000000002772], [0.2772000000002772, 0.3638000000000687, 0.3635000000001089, 0.3679000000000666, 0.3635000000001089, 0.36649999999980687, 0.36359999999996695, 0.36800000000011185, 0.3635000000001089, 0.36800000000011185, 0.36359999999996695, 0.36649999999980687, 0.3635000000001089, 0.3679000000000666, 0.3635000000001089, 0.3638000000000687, 0.2772000000002772], [0.2772000000002772, 0.3638000000000687, 0.3635000000001089, 0.3635000000001089, 0.3635000000001089, 0.36359999999996695, 0.36800000000011185, 0.3635000000001089, 0.36800000000011185, 0.3635000000001089, 0.36800000000011185, 0.36359999999996695, 0.3635000000001089, 0.3635000000001089, 0.3635000000001089, 0.3638000000000687, 0.2772000000002772], [0.2772000000002772, 0.3638000000000687, 0.3635000000001089, 0.3679000000000666, 0.3635000000001089, 0.36800000000011185, 0.3635000000001089, 0.36800000000011185, 0.36359999999996695, 0.36800000000011185, 0.3635000000001089, 0.36800000000011185, 0.3635000000001089, 0.3679000000000666, 0.3635000000001089, 0.3638000000000687, 0.2772000000002772], [0.2772000000002772, 0.3638000000000687, 0.36800000000011185, 0.3635000000001089, 0.36800000000011185, 0.36359999999996695, 0.36800000000011185, 0.36359999999996695, 0.36649999999980687, 0.36359999999996695, 0.36800000000011185, 0.36359999999996695, 0.36800000000011185, 0.3635000000001089, 0.36800000000011185, 0.3638000000000687, 0.2772000000002772], [0.2772000000002772, 0.2772000000002772, 0.3638000000000687, 0.36649999999980687, 0.36359999999996695, 0.36800000000011185, 0.3635000000001089, 0.3635000000001089, 0.3635000000001089, 0.3635000000001089, 0.3635000000001089, 0.36800000000011185, 0.36359999999996695, 0.36649999999980687, 0.3638000000000687, 0.2772000000002772, 0.2772000000002772], [0.0, 0.2772000000002772, 0.3638000000000687, 0.3638000000000687, 0.36649999999980687, 0.3635000000001089, 0.3679000000000666, 0.3635000000001089, 0.3679000000000666, 0.3635000000001089, 0.3679000000000666, 0.3635000000001089, 0.36649999999980687, 0.3638000000000687, 0.3638000000000687, 0.2772000000002772, 0.0], [0.0, 0.2772000000002772, 0.2772000000002772, 0.3638000000000687, 0.3638000000000687, 0.36800000000011185, 0.3635000000001089, 0.3635000000001089, 0.3635000000001089, 0.3635000000001089, 0.3635000000001089, 0.36800000000011185, 0.3638000000000687, 0.3638000000000687, 0.2772000000002772, 0.2772000000002772, 0.0], [0.0, 0.0, 0.2772000000002772, 0.2772000000002772, 0.2772000000002772, 0.3638000000000687, 0.3638000000000687, 0.3638000000000687, 0.3638000000000687, 0.3638000000000687, 0.3638000000000687, 0.3638000000000687, 0.2772000000002772, 0.2772000000002772, 0.2772000000002772, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.2772000000002772, 0.2772000000002772, 0.2772000000002772, 0.2772000000002772, 0.2772000000002772, 0.2772000000002772, 0.2772000000002772, 0.2772000000002772, 0.2772000000002772, 0.0, 0.0, 0.0, 0.0]]
keff_femffusion = 1.025346e+00 

## INITIALIZATION
case_name_base = "OBJECTIVES7_MAPDET_TEST_2DMG_BIBLIS1"
case_name2 = "OBJECTIVES7_MAPDET_TEST_2DMG_BIBLIS1"
geom_type = '2D rectangular'
precond = 0
expand = 1
I_max = len(D1[0]) # N row
J_max = len(D1) # N column
N = I_max*J_max
dy = 23.1226/expand
dx = 23.1226/expand
x = np.arange(0, I_max*dx, dx)
y = np.arange(0, J_max*dy, dy)
group = 2

D = [D1, D2]

# BC
BC = [3, 3, 3, 3] # N, S, E, W

# Dynamic parameters
f = 1.0
omega = 2 * np.pi * f

v1 = 12500000
v2 = 250000
v1 = [[v1] * I_max for _ in range(J_max)]
v2 = [[v2] * I_max for _ in range(J_max)]
v = [v1, v2]

Beff = 0.0065
l = 0.0784 

# Noise sources
dTOT1 = [[0] * I_max for _ in range(J_max)]
dTOT2 = [[0] * I_max for _ in range(J_max)]
dABS1 = [[0] * I_max for _ in range(J_max)]
dABS2 = [[0] * I_max for _ in range(J_max)]
dNUFIS1 = [[0] * I_max for _ in range(J_max)]
dNUFIS2 = [[0] * I_max for _ in range(J_max)]

dSIGS12 = [[0] * I_max for _ in range(J_max)]
dSIGS21 = [[0] * I_max for _ in range(J_max)]
dSIGS11 = [[0] * I_max for _ in range(J_max)]
dSIGS22 = [[0] * I_max for _ in range(J_max)]

for j in range(8 * expand, 9 * expand):
    for i in range(8 * expand, 9 * expand):
        dABS2[j][i] = 0.005

# Perform element-wise addition
for j in range(J_max):  # Iterate over columns
    for i in range(I_max):  # Iterate over rows
        dTOT1[j][i] = dABS1[j][i] + dSIGS12[j][i]
        dTOT2[j][i] = dABS2[j][i] + dSIGS21[j][i]

dTOT = [dTOT1, dTOT2]
dNUFIS = [dNUFIS1, dNUFIS2]
D = [D1, D2]

# Reshaping
N = I_max*J_max
dTOT_reshaped = [[None] * N for _ in range(group)]
dNUFIS_reshaped = [[None] * N for _ in range(group)]
v_reshaped = [[None] * N for _ in range(group)]
dSIGS12_reshaped = [0.0 for _ in range(N)]
dSIGS21_reshaped = [0.0 for _ in range(N)]
dSIGS11_reshaped = [0.0 for _ in range(N)]
dSIGS22_reshaped = [0.0 for _ in range(N)]
for g in range(group):
    for j in range(J_max):  
        for i in range(I_max):
            m = j * I_max + i
            dTOT_reshaped[g][m] = dTOT[g][j][i]
            dNUFIS_reshaped[g][m] = dNUFIS[g][j][i]
            v_reshaped[g][m] = v[g][j][i]
            dSIGS11_reshaped[m] = dSIGS11[j][i]
            dSIGS12_reshaped[m] = dSIGS12[j][i]
            dSIGS21_reshaped[m] = dSIGS21[j][i]
            dSIGS22_reshaped[m] = dSIGS22[j][i]

dSIGS_reshaped = [[dSIGS11_reshaped, dSIGS21_reshaped], [dSIGS12_reshaped, dSIGS22_reshaped]]

dTOT = dTOT_reshaped
v = v_reshaped
dNUFIS = dNUFIS_reshaped

noise_pos = 0
type_noise = 0

map_detector = [
9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 
9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 9, 
9, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 9, 
9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 9, 
0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 
0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 9, 
9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 
9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 9, 9, 
9, 9, 9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 
]

map_zone = [
99, 99, 99, 99,  1,  1,  1,  1,  2,  2,  2,  2,  2, 99, 99, 99, 99, 
99, 99,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2, 99, 99, 
99,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2, 99, 
99,  1,  1,  1,  1,  1,  4,  4,  2,  3,  3,  3,  3,  3,  3,  2, 99, 
 4,  4,  4,  4,  4,  4,  4,  4,  3,  3,  3,  3,  3,  3,  3,  3,  3, 
 4,  4,  4,  4,  4,  4,  4,  5,  5,  5,  3,  3,  3,  3,  3,  3,  3, 
 4,  4,  4,  4,  4,  6,  6,  6,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
 6,  6,  6,  6,  6,  6,  6,  6,  5,  5,  5,  5,  5,  5,  5,  5,  5, 
 6,  6,  6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7,  5, 
 6,  6,  8,  8,  8,  8,  8,  8,  7,  7,  7,  7,  7,  7,  7,  7,  7, 
 8,  8,  8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  7,  7,  7,  7, 
 8,  8,  8,  8,  8,  8,  8, 10,  9,  9,  9,  9,  9,  9,  9,  9,  9, 
10, 10, 10, 10, 10, 10, 10, 10, 10, 10,  9,  9,  9,  9,  9,  9,  9, 
99, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 99, 
99, 12, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 11, 99, 
99, 99, 12, 12, 12, 12, 12, 12, 12, 11, 11, 11, 11, 11, 11, 99, 99, 
99, 99, 99, 99, 12, 12, 12, 12, 12, 12, 11, 11, 11, 99, 99, 99, 99, 
]

# Original map_zone reshaped into 2D
map_zone_reshape = np.reshape(map_zone, (17, 17))
map_detector_reshape = np.reshape(map_detector, (17, 17))
multiplicator = np.ones((expand, expand))
map_zone_full_temp = np.kron(map_zone_reshape, multiplicator)
map_detector_full_temp = np.kron(map_detector_reshape, multiplicator)
map_zone = np.array(map_zone_full_temp).flatten().astype(int).tolist()
map_detector = np.array(map_detector_full_temp).flatten().astype(int).tolist()

#######################################################################################################
output_dir = f'../OUTPUTS/{case_name_base}'

##### Forward Simulation
solver_type = 'forward'
os.makedirs(f'{output_dir}/{case_name2}_{solver_type.upper()}', exist_ok=True)
conv = convert_index_2D_rect(D, I_max, J_max)
conv_array = np.array(conv)
matrix_builder = MatrixBuilderForward2DRect(group, N, conv, TOT, SIGS_reshaped, BC, dx, dy, D, chi, NUFIS)
M, F_FORWARD = matrix_builder.build_forward_matrices()
solver = SolverFactory.get_solver_power2DRect(solver_type, group, N, conv, M, F_FORWARD, dx, dy, precond, tol=1E-10)
keff, PHI_temp = solver.solve()
PHI, PHI_reshaped, PHI_reshaped_plot = PostProcessor.postprocess_power2DRect(PHI_temp, conv, group, N, I_max, J_max)
output = {"keff": keff.real}
for g in range(len(PHI_reshaped)):
    phi_groupname = f'PHI{g + 1}_{solver_type.upper()}'
    output[phi_groupname] = [val.real for val in PHI_reshaped[g]]
with open(f'{output_dir}/{case_name2}_{solver_type.upper()}/{case_name2}_{solver_type.upper()}_output.json', 'w') as json_file:
    json.dump(output, json_file, indent=4)

##### Adjoint Simulation
solver_type = 'adjoint'
os.makedirs(f'{output_dir}/{case_name2}_{solver_type.upper()}', exist_ok=True)
conv = convert_index_2D_rect(D, I_max, J_max)
conv_array = np.array(conv)
matrix_builder = MatrixBuilderAdjoint2DRect(group, N, conv, TOT, SIGS_reshaped, BC, dx, dy, D, chi, NUFIS)
M, F_ADJOINT = matrix_builder.build_adjoint_matrices()
solver = SolverFactory.get_solver_power2DRect(solver_type, group, N, conv, M, F_ADJOINT, dx, dy, precond, tol=1E-10)
keff, PHI_ADJ_temp = solver.solve()
PHI_ADJ, PHI_ADJ_reshaped, PHI_ADJ_reshaped_plot = PostProcessor.postprocess_power2DRect(PHI_ADJ_temp, conv, group, N, I_max, J_max)
output = {"keff": keff.real}
for g in range(len(PHI_ADJ_reshaped)):
    phi_groupname = f'PHI{g + 1}_{solver_type.upper()}'
    output[phi_groupname] = [val.real for val in PHI_ADJ_reshaped[g]]
with open(f'{output_dir}/{case_name2}_{solver_type.upper()}/{case_name2}_{solver_type.upper()}_output.json', 'w') as json_file:
    json.dump(output, json_file, indent=4)

# Get all initial indices with value 1
map_detector = np.array(map_detector)
active_indices = np.where(map_detector == 1)[0]
np.random.shuffle(active_indices)  # randomize order of deactivation

validity_INVERT = []
validity_ZONE = []
validity_SCAN = []
validity_BRUTE = []
validity_BACK = []
validity_GREEDY = []
methods = ["INVERT", "ZONE", "SCAN", "BRUTE", "BACK", "GREEDY"]
conv = convert_index_2D_rect(D, I_max, J_max)
conv_array = np.array(conv)

# Check if the file exists, if yes, delete it
iter_file = f"../OUTPUTS/{case_name_base}/iteration_info.txt"
if os.path.exists(iter_file):
    os.remove(iter_file)
    print(f"Existing file '{iter_file}' deleted.")

conv_new = np.zeros((group*N))
for g in range(group):
    for n in range(N):
        m = g * N + n
        if conv[n] > 0:
            conv_new[m] = g * max(conv) + conv[n]

for i, idx in enumerate(active_indices):
    case_name = f'{case_name2}_iter{i}'

    # Append to file without changing loop structure
    with open(iter_file, "a") as file:
        file.write(f"Iteration: {i+1}, number of active detectors: {np.sum(map_detector == 1)}\n")

    # Append map_detector to a separate file
    with open(f"../OUTPUTS/{case_name_base}/map_detector_iter{i}.txt", "w") as f_map:
        f_map.write("map_detector = [")
        f_map.write(", ".join(str(int(x)) for x in map_detector))
        f_map.write("]\n")

    dPHI_temp = main_unfold_2D_rect_noise(PHI_temp, keff, group, N, I_max, J_max, TOT, SIGS_reshaped, BC, dx, dy, D, chi, NUFIS, precond, v, Beff, omega, l, dTOT, dSIGS_reshaped, dNUFIS, map_detector, output_dir, case_name, x, y)
    G_matrix = main_unfold_2D_rect_green(PHI_temp, keff, group, N, I_max, J_max, TOT, SIGS_reshaped, BC, dx, dy, D, chi, NUFIS, precond, v, Beff, omega, l, dTOT, dSIGS_reshaped, dNUFIS, map_detector, output_dir, case_name, x, y)
    S, dPHI_temp_meas = main_unfold_2D_rect_solve(PHI_temp, G_matrix, dPHI_temp, keff, group, N, I_max, J_max, TOT, SIGS_reshaped, BC, dx, dy, D, chi, NUFIS, precond, v, Beff, omega, l, dTOT, dSIGS_reshaped, dNUFIS, map_detector, output_dir, case_name, x, y)

    try:
        dPHI_temp_INVERT, dS_unfold_INVERT_temp = main_unfold_2D_rect_invert(dPHI_temp_meas, dPHI_temp, S, G_matrix, group, N, I_max, J_max, conv, map_detector, map_zone, output_dir, case_name, x, y)
        if np.allclose(S, dS_unfold_INVERT_temp, atol=1E-06):
            validity_INVERT.append('yes')
        else:
            validity_INVERT.append('no')

        dS_unfold_ZONE_temp = main_unfold_2D_rect_zone(dPHI_temp_meas, dPHI_temp, S, G_matrix, group, N, I_max, J_max, conv, map_detector, map_zone, output_dir, case_name, x, y)
        if np.allclose(S, dS_unfold_ZONE_temp, atol=1E-06):
            validity_ZONE.append('yes')
        else:
            validity_ZONE.append('no')

        dS_unfold_SCAN_temp = main_unfold_2D_rect_scan(dPHI_temp_meas, dPHI_temp, S, G_matrix, group, N, I_max, J_max, conv, map_detector, map_zone, output_dir, case_name, x, y)
        if np.allclose(S, dS_unfold_SCAN_temp, atol=1E-06):
            validity_SCAN.append('yes')
        else:
            validity_SCAN.append('no')
    except Exception as e:
        print(f"Unfolding failed: {e}")

        # Append failure indicators
        validity_INVERT.append('fail')
        validity_ZONE.append('fail')
        validity_SCAN.append('fail')  

    try:
        dPHI_temp_BRUTE, dS_unfold_BRUTE_temp = main_unfold_2D_rect_brute(dPHI_temp_meas, dPHI_temp, S, G_matrix, group, N, I_max, J_max, conv, map_detector, output_dir, case_name, x, y)
        if np.allclose(S, dS_unfold_BRUTE_temp, atol=1E-06):
            validity_BRUTE.append('yes')
        else:
            validity_BRUTE.append('no')
    except Exception as e:
        print(f"Unfolding failed: {e}")

        # Append failure indicators
        validity_BRUTE.append('fail')

    try:
        dPHI_temp_GREEDY, dS_unfold_GREEDY_temp = main_unfold_2D_rect_greedy_new(dPHI_temp_meas, dPHI_temp, S, G_matrix, group, N, I_max, J_max, conv, output_dir, case_name, x, y)
        if np.allclose(S, dS_unfold_GREEDY_temp, atol=1E-06):
            validity_GREEDY.append('yes')
        else:
            validity_GREEDY.append('no')
    except Exception as e:
        print(f"Unfolding failed: {e}")

        # Append failure indicators
        validity_GREEDY.append('fail')

    validity = [validity_INVERT, validity_ZONE, validity_SCAN, validity_BRUTE, validity_BACK, validity_GREEDY]
    with open(f"../OUTPUTS/{case_name_base}/output_validity.txt", "w") as f:
        for category, lst in zip(methods, validity):
            f.write(f"{category} " + ", ".join(lst) + "\n")

    map_detector[idx] = 0